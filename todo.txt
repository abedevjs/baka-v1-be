🔴 1. update authCtrl.keluar(). tokennya clear
    -bagaimana dgn login? logout? apa hubuganya dengan access token dan refresh token di google??

🔴 2. Kondisi boleh update order apa saja ialah:
    a. jika order belum dibayar/lunas. Jika sudah lunas, silahkan buat order baru.
    b. solusi updateOrder:
    user hanya bisa order bagasi yang sama 3 kali. PENDING

🔴 3. Auth Controller path khusus Admin

🔴 4. Get User utk manipulate data User

🔴 5. Applying Oauth fb

🔴 6. Fee utk admin. Strategi:
    di bagasiModel:
    adminFee = hargaRp
    jika hargaRp di update oleh user, maka hargaRp tertinggi masih tetap sebagai adminFee

🔴 7. Waktu user daftar tidak perlu minta telpon, tapi ketika order atau jual bagasi minta telpon?
8. Klo user updatePassword bukan user.save() tapi user.findByIdAndUpdate()
🔴 9. createBagasi, user bisa menambahkan catatan khusus utk isi bagasinya
🔴 10. upload fitur dokumen utk createBagasi dan createOrder
🔴 11. Implementasi kan FBOauth. Agar regisnya cukup lwt google dan fb saja
🔴 12. Saat createBagasi atau createOrder, minta nomor wa nya jika telpon user empty
🔴 13. modelBagasi tambahkan tanggal tiba
🔴 14. createBagasi dan createOrder tambahkan field catatan (berarti tambahkan jg di model masing2)
🔴 15. buat waktuKedatangan di bagasiModel
🔴 16. Update status di bagasi (scheduled, opened, closed, canceled) dan order (preparing, ready, delivered)
🔴 17. Bisa jg createBagasi dan createOrder admin yg kendalikan?
18. Buat pilihan harga diskon di bagasiModel?
🔴 19. Pada saat createBagasi success, status otomatis akan 'scheduled'. admin periksa bukti tiket. jika valid, di db admin secara manual ganti status ke 'opened'. Jika tidak valid, akan terhapus otomatis setelah sekian jam/admin hapus manual di db?
🔴 20. Pada saat createOrder, di periksa dulu status bagasi. jika 'opened', tombol 'pesan bagasi sekarang' di UI jd enabled
🔴21. Buat Collection: delayedOrder. Jadi saat user createOrder, order tsb hnya berstatus 'delayed' dan datanya masuk ke Collection delayedOrder. Selanjutnya,
    admin secara manual memeriksa bukti pembayaran. Jika sukses, admin eksekusi fn activateOrder yg datax diambil dr Collection delayedOrder yg manipulate db Bagasi, db Order, dan db User dan status order tersebut jadi 'Ready'.
🔴 22. Jika status order sdh 'Ready', user tidak bisa membatalkan order nya. Kecuali, jika traveler nya tdk brkt.
23. Buat Collection Jastip. Model: isi pesanan (textarea), budget, buktipayment, dari, tujuan. Setelah payment valid, baka lokal/tujuan keluar utk belanja pesanan jastiper.
    Setelah sukses belanja, lapor ke jastiper. Terus lanjut beli bagasi melalui akun resmi baka dan minta payment beli bagasi dari jastiper tsb utk dikirim lokasi jastiper.
🔴 24. Order tdk bisa di edit/delete setelah status 'Ready'.
🔴 25. Status Order: Preparing (jika masih tunggu cek status pembayaran) dan Ready (jika pembayaran valid).
🔴 26. Buat Collection: delayedBagasi. Fungsinya sama seperti delayedOrder.
🔴 27. Untuk updateOrder, yang msh bisa di update hanya yg berstatus 'Preparing' (update) (msh dlm proses cek manual payment). 'Ready' (no update no delete), 'Delivered' (no update, bs delete)
🔴 28. Di bagasiModel dan updateBagasi tambahkan tanggalTiba
🔴 29. Di bagasiModel dan orderModel tambahkan Tax. bagasi (5% atau 0.05), order (3% atau 0.03).
🔴 30. Jika createOrder sebuah bagasi dan sudah terbayar (status: ready), berarti boleh createOrder lg di bagasiID yg sama (tdk ada batas maksimum untuk ini yg jls terbayar).
    Jika blm terbayar (status: preparing), maka arahkan ke updateOrder.

    31. Suatu hari buat fitur Jastip (jastipModel, jastipController, jastipRouter). Jadi user bisa buat list barang yg mau dia pesan/jastip dr luar negeri/indonesia.
        isinya ada listPesanan, negara tujuan, bujet, pembayaran, catatan. 
        Kemudian asetLokalBaka di negara tujuan belikan jastip tersebut memakai akun adminBaka/bakaLokal, 
        kemudian barang Jastip tersebut di titip dgn cara booking bagasi travaler di bakaApp
🔴 32. di bagasiModel dan orderModel buat field: adminFee hasil kalkulasi biaya2 dgn Tax
🔴 33. auto status ke closed jika bagasi penuh. dan klo sudah closed atau availableKg = 0, bagasi tidak bisa di order
🔴 34. Automatic delete/modify document against time or other variable
🔴 35. Dalam kondisi apa Bagasi.status = Canceled. Dan ini apa efeknya ke User
🔴 36. Dalam kondisi apa Order.status = 'Delivered' atau 'Canceled'. Dan ini apa efeknya ke User
🔴 37. Lebih baik buat routes sendiri/midware utk upload document, agar setelah user createBagasi atau createOrder dan updateBagasi atau updateOrder = Success,
    barulah kita minta upload dokumen penerbangan / bukti payment
🔴 38. Node-scheduled Mengubah Model.status = Closed dan Canceled Delivered dan Canceled ke Model.active = false
🔴 39. Perhatikan, saat User updateBagasi.waktuBerangkat/waktuTiba, Order.bagasi.waktuBerangkat dan atau Order.waktuTiba tidak terupdated!
    Ini harus di fix karena mempengaruhi Node-scheduled
🔴 40. Perbaiki lagi algoritma //todo 4. Check if ordered Bagasi is bigger than the new one, request denied. di updateBagasi



setelah Oauth: strategy sementara:
setelah new UserGoogle.create({}) buat copy ke User model dengan UserGoogle.aggregate([{}])
jika ada copy di User, seluruh operasional di bagasiController, orderController, userController hanya pakai User model

/////////////////////////////////////////////////////////////////

TODO:

AUTHENTICATION
✅ 5. Applying Oauth fb
✅ 11. Implementasi kan FBOauth. Agar regisnya cukup lwt google dan fb saja
✅ 1. update authCtrl.keluar(). tokennya clear
    -bagaimana dgn login? logout? apa hubuganya dengan access token dan refresh token di google??. 🟢Answer: auth dan cookies di handle passport
    -bagaimana cara kita tahu jika user ter logged in?. 🟢Answer: auth dan cookies di handle passport
✅ 3. Auth Controller path khusus Admin
✅ 7. Waktu user daftar tidak perlu minta telpon, tapi ketika order atau jual bagasi minta telpon, atau ketika update user profile.
✅ 32. di bagasiModel dan orderModel buat field: adminFee hasil kalkulasi biaya2 dgn Tax
✅ 33. auto status ke closed jika bagasi penuh. dan klo sudah closed atau availableKg = 0, bagasi tidak bisa di order


BAGASI
✅ 6. Fee utk admin. Strategi: 🟢Answer: Fee utk admin menggunakan percentage dari total transaksi
    di bagasiModel:
    adminFee = hargaRp
    jika hargaRp di update oleh user, maka hargaRp tertinggi masih tetap sebagai adminFee
✅ 7. Waktu user daftar tidak perlu minta telpon, tapi ketika order atau jual bagasi minta telpon, atau ketika update user profile.
✅ 12. Saat createBagasi atau createOrder, minta nomor wa nya jika telpon user empty
✅ 9. createBagasi, user bisa menambahkan catatan khusus utk isi bagasinyas
✅ 14. createBagasi dan createOrder tambahkan field catatan (berarti tambahkan jg di model masing2)
✅ 10. upload fitur dokumen utk createBagasi dan createOrder
✅ 13. modelBagasi tambahkan tanggal tiba
✅ 28. Di bagasiModel dan updateBagasi tambahkan tanggalTiba
✅ 15. buat waktuKedatangan di bagasiModel
✅ 16. Update status di bagasi ('Scheduled', 'Opened', 'Closed', 'Canceled')
✅ 17. Bisa jg createBagasi dan createOrder admin yg kendalikan?
✅ 19. Pada saat createBagasi success, status otomatis akan 'scheduled'. admin periksa bukti tiket. jika valid, di db admin secara manual ganti status ke 'opened'. Jika tidak valid, akan terhapus otomatis setelah sekian jam/admin hapus manual di db?
🟥 26. Buat Collection: delayedBagasi. Fungsinya sama seperti delayedOrder. 🟢Answer: Tidak perlu. Cukup routes khusus Admin
✅ 29. Di bagasiModel dan orderModel tambahkan Tax. bagasi (5% atau 0.05), order (3% atau 0.03).
✅ 34. Automatic delete/modify document against time or other variable
35. Dalam kondisi apa Bagasi.status = Canceled. Dan ini apa efeknya ke User
✅ 37. Lebih baik buat routes sendiri/midware utk upload document, agar setelah user createBagasi atau createOrder dan updateBagasi atau updateOrder = Success,
    barulah kita minta upload dokumen penerbangan / bukti payment
✅ 38. Node-scheduled Mengubah Model.status = Closed dan Canceled Delivered dan Canceled ke Model.active = false
✅ 39. Perhatikan, saat User updateBagasi.waktuBerangkat/waktuTiba, Order.bagasi.waktuBerangkat dan atau Order.waktuTiba tidak terupdated!
    Ini harus di fix karena mempengaruhi Node-scheduled. 🟢Answer: Di fix dengan reference di Order.bagasiId nya tdk lg dgn full Object (Bagasi). Tapi hanya Bagasi: _id.
40. Perbaiki lagi algoritma //todo 4. Check if ordered Bagasi is bigger than the new one, request denied. di updateBagasi



CARI SOLUSI
❗ Jika createOrder dilakukan, maka ia akan calculate bagasi detail yg kemungkinan bisa saja nanti terudpdate oleh orderan lain yg sdh di verifikasi,
jd pada saat user lain createOrder, ia bukan lihat misalnya availableKg = 60 tp sebenarnya sudah availableKg = 10, karena di createOrder sebelumnya,
payment nya valid dan tetapi admin belum ada waktu verifikasi. jadi user ke 2 yg createOrder harus modifikasi order detail dan jumlah payment nya,
paling parah jika user 2 sudah transfer. 🟢Answer: Hanya layani customer yg sudah bayar.

STEP SOLUSI
✅ bereskan dulu algoritma createBagasi, createOrder kemudian barulah updateBagasi dan updateOrder

ORDER

✅ 2. Kondisi boleh update order apa saja ialah:
    a. jika order belum dibayar/lunas. Jika sudah lunas, silahkan buat order baru.
    b. solusi updateOrder:
    c. user hanya bisa order bagasi yang sama 3 kali. 🟢Answer: Bagasi bisa di order multiple times oleh satu user asalkan lunas semua.
✅ 7. Waktu user daftar tidak perlu minta telpon, tapi ketika order atau jual bagasi minta telpon?
✅ 12. Saat createBagasi atau createOrder, minta nomor wa nya
✅ 10. upload fitur dokumen utk createBagasi dan createOrder
✅ 14. createBagasi dan createOrder tambahkan field catatan (berarti tambahkan jg di model masing2)
✅ 16. Update status di bagasi ('Scheduled', 'Opened', 'Closed', 'Canceled')
✅ 17. Bisa jg createBagasi dan createOrder admin yg kendalikan? 🟢Answer: routes khusus Admin
✅ 21. Buat Collection: delayedOrder. Jadi saat user createOrder, order tsb hnya berstatus 'delayed' dan datanya masuk ke Collection delayedOrder. Selanjutnya,
    admin secara manual memeriksa bukti pembayaran. Jika sukses, admin eksekusi fn activateOrder yg datax diambil dr Collection delayedOrder yg manipulate db Bagasi, db Order, dan db User dan status order tersebut jadi 'Ready'.
    🟢Answer: Tidak perlu. Ada routes khusus Admin.
✅ 22. Jika status order sdh 'Ready', user tidak bisa membatalkan order nya. Kecuali, jika traveler nya tdk brkt.
✅ 24. Order tdk bisa di edit/delete setelah status 'Ready'. 🟢Answer: 'Preparing' yes edit yes delete. 'Ready' no edit no delete. 'Delivered' no edit yes delete
✅ 25. Status Order: Preparing (jika masih tunggu cek status pembayaran) dan Ready (jika pembayaran valid).
✅ 27. Untuk updateOrder, yang msh bisa di update hanya yg berstatus 'Preparing' (update) (msh dlm proses cek manual payment). 'Ready' (no update no delete), 'Delivered' (no update, bs delete)
✅ 29. Di bagasiModel dan orderModel tambahkan Tax. bagasi (5% atau 0.05), order (3% atau 0.03).
✅ 30. Jika createOrder sebuah bagasi dan sudah terbayar (status: ready), berarti boleh createOrder lg di bagasiID yg sama (tdk ada batas maksimum untuk ini yg jls terbayar).
    Jika blm terbayar (status: preparing), maka arahkan ke updateOrder.
✅ 31. deleteOrder moshkelah. 🟢Answer: Betul moshkelah karena pake updateOne yg activate document midware di Order Model yg modify increment Bagasi
✅ 34. Automatic delete/modify document against time or other variable
36. Dalam kondisi apa Order.status = 'Delivered' atau 'Canceled'. Dan ini apa efeknya ke User
✅ 37. Lebih baik buat routes sendiri/midware utk upload document, agar setelah user createBagasi atau createOrder dan updateBagasi atau updateOrder = Success,
    barulah kita minta upload dokumen penerbangan / bukti payment
✅ 38. Node-scheduled Mengubah Model.status = Closed dan Canceled Delivered dan Canceled ke Model.active = false
✅ 39. Perhatikan, saat User updateBagasi.waktuBerangkat/waktuTiba, Order.bagasi.waktuBerangkat dan atau Order.waktuTiba tidak terupdated!
    Ini harus di fix karena mempengaruhi Node-scheduled. 🟢Answer: Di fix dengan reference di Order.bagasiId nya tdk lg dgn full Object (Bagasi). Tapi hanya Bagasi: _id.



USER
4. Get User utk manipulate data User

============================== PASCA INITIAL REACT CONNECT ==============================

❗REMINDER❗
❗Don’t forget the enctype="multipart/form-data" in your form. karena pakai multer
    ✅ done
❗20. Pada saat createOrder, di periksa dulu status bagasi. jika 'opened', tombol 'pesan bagasi sekarang' di UI jd enabled
    ✅ done
❗40. Perbaiki lagi algoritma //todo 4. Check if ordered Bagasi is bigger than the new one, request denied. di updateBagasi
    ✅Algorithma sudah diperbaiki, jd di frontend defaultValue=initialKg tapi input=req.body.availableKg. Sehingga algo nya lbh simpel (silahkan cek updateBagasi)
❗Don’t forget security Middleware
    ✅ done
❓Pastikan updateBagasi dan updateOrder yg id nya tidak ada, tdk masuk dalam UI (table). < tidak ngerti, lupa soal apa ???

BAGASI
🔴 Update alamatDari only yes to status [Scheduled, Opened]. Update alamatTujuan only yes to status [Scheduled, Opened, Closed, UnLoaded]
    ✅ done
🔴❓ Jika status bagasi 'Closed', apakah user boleh update beratnya lagi? boleh ga user tambah kg bagasi yg ingin dy jual?
    ✅ Utk sementara, klo status 'Closed', bagasi tdk bs di update
🔴❓ Kapan bagasi.status === 'Canceled' dan apa yg terjadi?. Diatur oleh nodeschedule kah?.
    ✅ bagasi.status === 'Canceled' jika hingga di hari waktuBerangkat status bagasi masih 'Scheduled', dan ya diatur nodeschedule case 1
🔴❓ Guard clause di bagasiUpdate terlalu strict perlu di sync dgn FE react?
🔴 Bagasi_tax bisa jadi 0% untuk user yang ada perjanjian partnership dgn Baka. Di UserAuth tambahkan property partnership: Boolean.
🔴❓ Jika Bagasi status 'Closed' bisakah untuk update harga lagi?

ORDER
🔴 Cek lagi: 'Kakak hanya boleh memiliki ${process.env.MAX_ORDER_ACTIVE} order aktif' apakah ini order active semua
    ✅ Jadi 1 user boleh order macam2 bagasi meskipun blm bayar, tapi maksimal 10. Jika yg di order adalah bagasi yang sama: klo sudah bayar -> diarahkan buat createOrder. klo blm bayar -> diarahkan updateOrder.
🔴❓ Kapan order.status === 'Postponed' dan apa yg terjadi?. Diatur oleh nodeschedule kah?.
    ✅ order.status === 'Postponed' jika order.status == 'Preparing' hingga bagasi status nya 'Closed', dan ya diatur nodeschedule case 3
🔴❓ Perlu di pertimbangkan User hanya bisa order max 2 kali di Bagasi yg sama. Meskipun 2 Order tsb status == 'Ready'. Karena di deleteOrder, algo kita hanya bisa delete 1id dari Order.orderBagasiId arr?
    ✅ Sdh di cek algo nya, sejauh ini bulletproof.
🔴❓ Bgmn handle order preparing yang bagasinya sudah closed, tapi jauh sebelum h-1 waktuBerangkat. Akankah dy dibiarkan Postponed terus?
    ✅ done, sdh di handle nodeschedule

USER
🔴 Algo deleteUser harus perbaiki lagi. Syarat delete user: 1. Tidak ada bagasi yg sudah di booking (status: !== Opened && bookedKg == 0). 2. Tidak ada order yg ready (status !== ready)
    ✅ done
🔴 User bisa update nama, nomorwa, nomor rekening, nama bank. Lakukan ini jg di frontend
    ✅ done
🔴 Get User khusus utk admin utk manipulate data User
    ✅ done utk sementara manipulate data User langsung lewat mongoDB
🔴 Tambahkan property di User model, partnership: ['Buddy', 'Loyal', 'Frequent', 'Regular'], tiap parntnership menentukan jumlah % tax pada Bagasi
🔴 Tiap property tsb ditentukan oleh jumlah 'Unloaded', less 'Canceled' / complain from other User, frekuensi jual bagasi dlm wkt tertentu, dll
🔴 Buat property 'suksesBagasi' dan 'suksesOrder' yg di increment +1 jika bagasi User 'UnLoaded' atau order User 'Delivered'.

UPLOAD
🔴 Klo user.dokumen sdh ada dokumen dan bagasi.dokumen jg sdh ada dokumen, bagaimana solusinya di admin/status-bagasi/:id?
    ✅ saat admin mengisi body.dokumen pastikan itu dokumen yang sdh di periksa dan valid, agar ter update di bagasi/order.dokumen
🔴 //* Renaming Order.dokumen dari req.body.dokumen (Admin yang isi manual) perlu di keluarin dari scope if (!order.dokumen && !!mergedArr), karena jika admin asal nulis req.body.dokumen dan saat bersamaan bagasi/order.dokumen bukan empty string, otomatis lolos, bagasi/order status nya ganti tanpa terupdate di dokumennya, nama dokumen yg bener yg mana.
    ✅ ini menunjukkan bahwa user upload dokumen di url yg ada id nya updateBagasi/:id atau updateOrder/:id. Admin hanya perlu memastikan mana dokumen yang valid dan menuliskannya secara manual di req.body.dokumen agar dokumen tsb terupdate di bagasi/order.dokumen

ADMIN
🔴 Ketika updateBagasiStatus selain manipulate status dan dokumen, harap manipulate juga nama pesawat (update manual lwt form sm kyk status dan nama dokumen)
    ✅ done
🔴 Buat model untuk dokumen, setiap user upload dokumen, masuk ke database dokumen. Admin mudah cek di database dokumen terbaru yang di upload, agar selanjutnya bisa di aktifkan
    ✅ done
🔴 Get User khusus utk admin utk manipulate data User
🔴❓ Jika Baka sudah jalan, sdh dapat feedback, minta saran dengan fitur baru JASTIP pada customer

USUL ADDOL
🔴 Pada model Bagasi, tambahkan alamat kotaDari dan alamat kotaTujuan. Telpon dan alamat akan ter ekspos setelah payment valid / order.status = 'Ready'
    ✅ done
    ORDER
    🔴 Perlu buat router baru lagi. isinya ketika di execute akan set order.status == 'Delivered'. di User.order id nya terhapus. Di Order.active == false (akan di handle nodeshedule setelah 2minggu). trus dy cek ke bagasi nya, klo seluruh order di bagasi tsb sudah delivered jg, bagasi.status dari 'Closed' ke 'Unloaded'.
        ✅ done api order/:id/delivered
    🔴 Pada updateOrder ada tombol 'Selesai'. Klo di klik, berarti order.status == 'Delivered', payment di release ke bagasi owner (secara manual).
        ✅ done  api order/:id/delivered
    🔴 Klo tidak di klik misal user lupa, maka route ini akan ter execute di nodeschedule (jika memungkinkan, soalnya di route tsb ada req.params.id)
        ✅ done nodeschedule case 4
    🔴 Tombol 'Selesai' pada updateOrder akan mengubah status order jd 'Delivered'.
        ✅ done  api order/:id/delivered
    🔴❓ Di hari H TglTiba Bagasi, tombol 'Selesai' pada halaman updateOrder di UI baru bs enabled utk di klik, sebelumnya disabled={date today < waktuBerangkat}. +3hari setelah TglTiba bagasi, Tombol 'Selesai' otomatis activated (nodeschedule)?
        ✅ di UI algonya begini: status == "Ready" && Date.now() > Date.parse(waktuTiba)
    BAGASI
    🔴❗ Bagasi yg active == true hanya bisa false jika ketika semua order list bagasi tsb statusnya 'Delivered', maka bagasi.status == 'Unloaded', bagasi.active == false (akan di handle nodeshedule setelah 2minggu). Di User.bagasi id nya terhapus
        ✅ Sudah di include kan di algorithma api/order/:id/delivered
🔴 Di nodeschedule, bagasi/order yg status nya jadi false secara otomatis tp di user nya id bagasi/order tsb msh ada, jadi perlu id tsb perlu dihapus jg di user.bagasi atau user.order
    ✅ sdh di fix di nodeschedule Case 1, 2, 3, 4
🔴 Cek lagi nodeschedule, masih bekerja apa tdk jika pake branch fitur-UserAuth.
    ✅ Sdh di cek algo nya, sejauh ini bulletproof.

NODESCHEDULE
    FlowBagasi ["Scheduled", "Opened", "Closed", "Unloaded", "Canceled"]
        'Scheduled' (h-1 tgl brkt --nodeschedule daily case 1a) 'Canceled' ( --nodeschedule monthly case 5) 'false'
            ✅ done
        'Scheduled' (uploadTiket --user) 'Opened' (bagasiFull --user dan atau h-1 waktuBerangkat --nodeschedule daily case 1b) 'Closed' (orderDeliveredAPI --user dan --nodeschedule daily case 2) 'Unloaded' (--nodeschedule monthly case 5) 'false'.
            ✅ done
    FlowOrder ["Preparing", "Ready", "Delivered", "Postponed"]
        'Preparing' (Bagasi full --nodeschedule daily case 3a, h-1 tgl brkt --nodeschedule daily case 3b) 'Postponed' ( --nodeschedule monthly case 6) 'false'
            ✅ done
        'Preparing' (uploadPayment --user) 'Ready' (orderDeliveredAPI --user dan h+3 waktuTiba Bagasi --nodeschedule daily case 4) 'Delivered' ( --nodeschedule monthly case 6) 'false'.
            ✅ done

🔴 Pull id or array orderBagasiId from UserAuth.orderBagasiId di nodeschedule 3a, 3b, 4, dan orderController.deliveredOrder 
    ✅ done